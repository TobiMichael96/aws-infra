name: "Terraform Infrastructure"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main


env:
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BACKEND_CONFIG_BUCKET: ${{ secrets.BACKEND_CONFIG_BUCKET }}
  BACKEND_CONFIG_KEY: ${{ secrets.BACKEND_CONFIG_KEY }}
  BACKEND_CONFIG_REGION: ${{ secrets.BACKEND_CONFIG_REGION }}


jobs:
  terraform:
    name: "Terraform Infrastructure"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v3
      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BACKEND_CONFIG_BUCKET" -backend-config="key=$BACKEND_CONFIG_KEY" -backend-config="region=$BACKEND_CONFIG_REGION"
      - name: Terraform format
        id: fmt
        run: terraform fmt -check
      - name: Terraform validate
        id: validate
        run: terraform validate
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
        if: github.event_name != 'pull_request'
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
            
              issue_number: context.issue.number,
            
              owner: context.repo.owner,
            
              repo: context.repo.repo,
            
              body: output
            
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
        if: github.event_name == 'pull_request'